require("dotenv").config();
const fs = require("fs");
const { Web3 } = require("web3");

// Ì†ΩÌ¥• K·∫øt n·ªëi v·ªõi Sahara Testnet
const RPC_URL = "https://testnet.saharalabs.ai";
const web3 = new Web3(RPC_URL);

// Ì†ΩÌ≥å ƒê·ªçc danh s√°ch Private Key t·ª´ file `private_keys.txt`
function getPrivateKeys(): string[] {
  try {
    const data: string = fs.readFileSync("/root/nexus-tx/private_keys.txt", "utf8");
    const keys: string[] = data
      .split("\n") // Chia th√†nh t·ª´ng d√≤ng
      .map((key: string) => key.trim()) // X√≥a kho·∫£ng tr·∫Øng
      .filter((key: string) => key !== "") // L·ªçc d√≤ng tr·ªëng
      .map((key: string) => (key.startsWith("0x") ? key.slice(2) : key)); // X√≥a ti·ªÅn t·ªë "0x" n·∫øu c√≥

    if (keys.length === 0) {
      console.error("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y b·∫•t k·ª≥ PRIVATE_KEY n√†o!");
      process.exit(1);
    }
    return keys;
  } catch (error) {
    console.error("‚ùå L·ªói khi ƒë·ªçc private_keys.txt:", error);
    process.exit(1);
  }
}

// Ì†ΩÌ≥å ƒê·ªçc danh s√°ch v√≠ t·ª´ `wallets.json`
function getWalletList(): { address: string; amount: string }[] {
  try {
    const data: string = fs.readFileSync("/root/nexus-tx/wallets.json", "utf8");
    return JSON.parse(data);
  } catch (error) {
    console.error("‚ùå L·ªói khi ƒë·ªçc wallets.json:", error);
    return [];
  }
}

// Ì†ΩÌ≤∞ L·∫•y s·ªë d∆∞ Native Token SAHARA
async function getBalance(address: string): Promise<string> {
  try {
    const balance = await web3.eth.getBalance(address);
    console.log(
      `[S·ªë d∆∞ v√≠: ${address}]:`,
      web3.utils.fromWei(balance, "ether"),
      "SAHARA\n"
    );
    return balance;
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y s·ªë d∆∞:", error);
    return "0";
  }
}

// Ì†ΩÌ¥Ñ G·ª≠i Native Token SAHARA t·ª´ t·∫•t c·∫£ Private Keys
async function sendNativeToken(privateKey: string) {
  const ACCOUNT = web3.eth.accounts.privateKeyToAccount("0x" + privateKey);
  await getBalance(ACCOUNT.address);

  const wallets = getWalletList();

  // Ì†ΩÌ¥• N·∫øu Private Key kh·ªõp v·ªõi v√≠ trong danh s√°ch, ch·ªâ g·ª≠i v·ªÅ ch√≠nh n√≥
  const selfTransaction = wallets.find(
    (w) => w.address.toLowerCase() === ACCOUNT.address.toLowerCase()
  );

  let recipients;
  if (selfTransaction) {
    console.log(`Ì†ΩÌ¥Ñ V√≠ ${ACCOUNT.address} c√≥ trong danh s√°ch. G·ª≠i v·ªÅ ch√≠nh n√≥.`);
    recipients = [{ address: ACCOUNT.address, amount: selfTransaction.amount }];
  } else {
    // Ì†ºÌøπ N·∫øu kh√¥ng tr√πng, g·ª≠i theo danh s√°ch `wallets.json`
    recipients = wallets;
  }

  for (let i = 0; i < recipients.length; i++) {
    const recipientAddress = recipients[i].address;
    const amount = web3.utils.toWei(recipients[i].amount, "ether"); // L·∫•y ƒë√∫ng s·ªë l∆∞·ª£ng t·ª´ file
    const nonce = await web3.eth.getTransactionCount(ACCOUNT.address);
    const gasPrice = await web3.eth.getGasPrice();
    const adjustedGasPrice = BigInt(gasPrice) * 12n / 10n; // TƒÉng 20%

    const balance = await getBalance(ACCOUNT.address);
    if (BigInt(balance) < BigInt(amount) + adjustedGasPrice * 21000n) {
      console.error(`‚ùå Kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ g·ª≠i ${web3.utils.fromWei(amount, "ether")} SAHARA`);
      continue;
    }

    // Ì†ºÌøπ T·∫°o giao d·ªãch g·ª≠i Native Token SAHARA
    const tx = {
      from: ACCOUNT.address,
      to: recipientAddress,
      value: amount,
      gas: 21000,
      gasPrice: adjustedGasPrice,
    };

    try {
      // Ì†ΩÌ¥ë K√Ω v√† g·ª≠i giao d·ªãch
      const signedTx = await web3.eth.accounts.signTransaction(tx, "0x" + privateKey);
      const receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);
      console.log(
        `‚úÖ Giao d·ªãch ${i + 1}/${recipients.length} th√†nh c√¥ng! ${web3.utils.fromWei(
          amount,
          "ether"
        )} SAHARA g·ª≠i ƒë·∫øn: ${recipientAddress} (nonce: ${nonce}), tx: `,
        receipt.transactionHash
      );
    } catch (error) {
      console.error(`‚ùå L·ªói khi g·ª≠i giao d·ªãch ${i + 1}:`, error);
    }

    await new Promise((resolve) => setTimeout(resolve, 10000)); // ƒê·ª£i 10 gi√¢y gi·ªØa m·ªói giao d·ªãch
  }

  console.log(`‚úÖ Ho√†n th√†nh g·ª≠i token SAHARA t·ª´ v√≠ ${ACCOUNT.address}\n`);
  await getBalance(ACCOUNT.address);
}

// Ì†ΩÌ¥Ñ Ch·∫°y l·∫∑p l·∫°i cho t·∫•t c·∫£ Private Keys
async function runWithRandomDelay() {
  const PRIVATE_KEYS = getPrivateKeys(); // L·∫•y danh s√°ch Private Key t·ª´ file

  for (const privateKey of PRIVATE_KEYS) {
    await sendNativeToken(privateKey);
  }

  const randomDelay = (5 + Math.random() * 5) * 60 * 1000; // Random t·ª´ 5 ƒë·∫øn 10 ph√∫t
  console.log(
    `============= ƒê·ª¢I ${randomDelay / 1000 / 60} PH√öT CH·∫†Y L·∫†I...==============\n\n`
  );
  setTimeout(runWithRandomDelay, randomDelay);
}

// Ì†ΩÌ∫Ä Kh·ªüi ch·∫°y ch∆∞∆°ng tr√¨nh
runWithRandomDelay();
